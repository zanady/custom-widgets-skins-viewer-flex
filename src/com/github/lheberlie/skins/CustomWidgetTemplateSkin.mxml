<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////
// Copyright (c) 2011 Esri. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////
-->
<!---
@private
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009"
             xmlns:s="library://ns.adobe.com/flex/spark"
             xmlns:mx="library://ns.adobe.com/flex/mx"
             xmlns:components="com.esri.viewer.components.*"
             creationComplete="init()"
             preinitialize="preinitializeHandler(event)">

    <fx:Declarations>
        <s:Bounce id="bounce"/>
    </fx:Declarations>

    <fx:Metadata>
        [HostComponent("com.github.lheberlie.CustomWidgetTemplate")]
    </fx:Metadata>
    <fx:Script>
        <![CDATA[
            import com.esri.viewer.utils.LocalizationUtil;

            import mx.events.EffectEvent;
            import mx.events.FlexEvent;

            import flashx.textLayout.formats.TextAlign;

            protected function effectEndHandler(event:EffectEvent):void
            {
                // when the state is changed from minimized to closed (which can be triggered by programmatic closing widget),
                // restore the widget size in order that when the widget is opened again, no resize is needed.
                hostComponent.width = hostComponent.widgetWidth;
                hostComponent.height = hostComponent.widgetHeight;
            }

            private function init():void
            {
                //rtl label truncation causes RTE
                if (layoutDirection == 'rtl')
                {
                    widgetLabel.maxDisplayedLines = 0;
                }
            }

            protected function resizeButton_preinitializeHandler(event:FlexEvent):void
            {
                if (hostComponent.isRtl())
                {
                    resizeButton.source = "assets/images/w_resize_rtl.png";
                }
                else
                {
                    resizeButton.source = "assets/images/w_resize.png";
                }
            }

            protected function preinitializeHandler(event:FlexEvent):void
            {
                if (hostComponent.isRtl())
                {
                    setStyle("textAlign", TextAlign.RIGHT);
                }
                else
                {
                    setStyle("textAlign", TextAlign.START);
                }
            }

            private function minimizingEnded(event:EffectEvent):void
            {
                icon.tabFocusEnabled = true;
                if (focusManager.showFocusIndicator)
                {
                    icon.setFocus();
                }
            }

            private function openEnded(event:EffectEvent):void
            {
                icon.tabFocusEnabled = false;
                if (focusManager.showFocusIndicator)
                {
                    focusManager.getNextFocusManagerComponent().setFocus();
                }
            }
        ]]>
    </fx:Script>
    <s:states>
        <s:State name="normal"/>
        <s:State name="open"/>
        <s:State name="minimized"/>
        <s:State name="closed"/>
        <s:State name="disabled"/>
    </s:states>

    <s:transitions>
        <s:Transition fromState="open" toState="minimized">
            <s:Sequence effectEnd="minimizingEnded(event)">
                <s:Fade duration="100" target="{widgetLabel}"/>
                <s:Fade duration="100" target="{headerToolGroup}"/>
                <s:Fade duration="100" target="{contentGroup}"/>
                <s:Fade duration="100" target="{widgetFrame}"/>
                <!-- Use mx:Resize instead of s:Resize for minimize to work with Flex 4.5 sdk -->
                <mx:Resize heightTo="30"
                           target="{hostComponent}"
                           widthTo="150"/>
                <s:Move duration="100" target="{header}"/>
                <s:Move easer="{bounce}" target="{icon}"/>
            </s:Sequence>
        </s:Transition>
        <s:Transition fromState="minimized" toState="open">
            <s:Sequence effectEnd="openEnded(event)">
                <s:Fade duration="100" target="{widgetFrame}"/>
                <s:Move target="{icon}"/>
                <!-- Use mx:Resize instead of s:Resize for minimize to work with Flex 4.5 sdk -->
                <mx:Resize heightTo="{hostComponent.widgetHeight}"
                           target="{hostComponent}"
                           widthTo="{hostComponent.widgetWidth}"/>
                <s:Fade duration="100" target="{widgetLabel}"/>
                <s:Fade duration="100" target="{contentGroup}"/>
                <s:Fade duration="100" target="{headerToolGroup}"/>
            </s:Sequence>
        </s:Transition>
        <s:Transition fromState="closed" toState="open">
            <s:Sequence>
                <s:Fade duration="100" target="{widgetFrame}"/>
                <s:Move target="{icon}"/>
                <s:Fade duration="100" target="{widgetLabel}"/>
                <s:Fade duration="100" target="{contentGroup}"/>
                <s:Fade duration="100" target="{headerToolGroup}"/>
            </s:Sequence>
        </s:Transition>
        <s:Transition fromState="open" toState="closed">
            <s:Sequence>
                <s:Fade duration="100" target="{widgetLabel}"/>
                <s:Fade duration="100" target="{headerToolGroup}"/>
                <s:Fade duration="100" target="{contentGroup}"/>
                <s:Fade duration="100" target="{widgetFrame}"/>
            </s:Sequence>
        </s:Transition>
        <!--
        <s:Fade alphaTo="0" target="{contentBackground}"/>
        <s:Fade alphaTo="0" target="{border}"/>
        <s:Fade alphaTo="0" target="{headerBackground}"/>
        -->
        <s:Transition fromState="minimized" toState="closed">
            <s:Sequence effectEnd="effectEndHandler(event)">
                <s:Fade duration="100" target="{widgetLabel}"/>
                <s:Parallel duration="100">
                    <s:Fade target="{widgetFrame}"/>
                </s:Parallel>
            </s:Sequence>
        </s:Transition>
    </s:transitions>

    <!-- the widget template wireframe -->
    <s:Group id="widgetFrame"
             left="0" right="0" top="0" bottom="0"
             alpha.closed="0">
        <!--<s:Rect width="100%" height="100%"
                radiusX="5"
                radiusY="5">
            <s:fill>
                <s:SolidColor id="contentBackground"
                              alpha="{getStyle('contentBackgroundAlpha')}"
                              alpha.minimized="0.5"
                              color="{getStyle('contentBackgroundColor')}"/>
            </s:fill>
            <s:stroke>
                <s:SolidColorStroke id="border"
                                    alpha.minimized="0.5"
                                    color="{getStyle('borderColor')}"/>
            </s:stroke>
        </s:Rect>
        <s:Rect width="100%" height="{header.height}"
                left="1" right="1" top="1"
                topLeftRadiusX="5"
                topRightRadiusX="5">
            <s:fill>
                <s:SolidColor id="headerBackground"
                              alpha="{getStyle('contentBackgroundAlpha')}"
                              alpha.minimized="0"
                              color="{getStyle('contentBackgroundColor')}"/>
            </s:fill>
        </s:Rect>
        <s:filters>
            <s:DropShadowFilter alpha="0.5"
                                blurX="10"
                                blurY="10"/>
        </s:filters>-->

        <s:Rect width="100%" height="100%"
                radiusX="10"
                radiusY="10">
            <s:fill>
                <s:LinearGradient x="143" y="0"
                                  rotation="90"
                                  scaleX="126">
                    <s:GradientEntry alpha="1"
                                     color="#fbfbf9"
                                     ratio="0"/>
                    <s:GradientEntry alpha="1"
                                     color="#b19f8d"
                                     ratio="1"/>
                </s:LinearGradient>
            </s:fill>
            <s:filters>
                <s:DropShadowFilter alpha="0.5"
                                    angle="90"
                                    blurX="7"
                                    blurY="7"
                                    color="0x000000"
                                    distance="1"
                                    hideObject="false"
                                    inner="false"
                                    knockout="false"
                                    quality="2"
                                    strength="1"/>
            </s:filters>
            <s:stroke>
                <s:SolidColorStroke caps="none"
                                    color="#3e2312"
                                    joints="miter"
                                    miterLimit="4"
                                    weight="1"/>
            </s:stroke>
        </s:Rect>
        <!--<s:BitmapImage id="windowRight"
                       left="0"
                       smooth="true"
                       source="@Embed('/assets/images/custom/windowright1.png')"/>
        <s:BitmapImage id="windowLeft"
                       right="0"
                       smooth="true"
                       source="@Embed('/assets/images/custom/windowleft.png')"/>
        <s:BitmapImage height="36"
                       left="{windowLeft.width}" right="{windowRight.width}"
                       fillMode="repeat"
                       smooth="true"
                       source="@Embed('/assets/images/custom/windowmiddle1.png')"/>-->

        <!-- WIDGET TOP LEFT HEADER BACKGROUND -->
        <s:Path id="top_left"
                alpha="1"
                blendMode="normal"
                data="M 0 27 L 0 36 L 30 36 L 30 0 L 12 0 C 12 0 10 0 10 0 C 4 0 0 4 0 9 C 0 9 0 27 0 27 Z "
                winding="evenOdd">
            <s:fill>
                <s:LinearGradient x="124" y="36"
                                  rotation="-90"
                                  scaleX="36">
                    <s:GradientEntry alpha="1"
                                     color="#3e2312"
                                     ratio="0"/>
                    <s:GradientEntry alpha="1"
                                     color="#614021"
                                     ratio="0.41"/>
                    <s:GradientEntry alpha="1"
                                     color="#85623f"
                                     ratio="1"/>
                </s:LinearGradient>
            </s:fill>
        </s:Path>
        <!-- WIDGET TOP CENTER HEADER BACKGROUND -->
        <s:Rect id="top_center"
                x="30" y="0" width="19" height="36"
                left="{top_left.width}" right="{top_right.width}"
                alpha="1"
                blendMode="normal"
                radiusX="0"
                radiusY="0">
            <s:fill>
                <s:LinearGradient x="78" y="36"
                                  rotation="-90"
                                  scaleX="36">
                    <s:GradientEntry alpha="1"
                                     color="#3e2312"
                                     ratio="0"/>
                    <s:GradientEntry alpha="1"
                                     color="#614021"
                                     ratio="0.41"/>
                    <s:GradientEntry alpha="1"
                                     color="#85623f"
                                     ratio="1"/>
                </s:LinearGradient>
            </s:fill>
        </s:Rect>
        <!-- WIDGET TOP RIGHT HEADER BACKGROUND -->
        <s:Path id="top_right"
                right="0"
                alpha="1"
                blendMode="normal"
                data="M 49 36 L 67 36 L 79 36 L 79 27 C 79 27 79 9 79 9 C 79 4 75 0 69 0 C 69 0 49 0 49 0 L 49 36 Z "
                winding="evenOdd">
            <s:fill>
                <s:LinearGradient x="173" y="36"
                                  rotation="-90"
                                  scaleX="36">
                    <s:GradientEntry alpha="1"
                                     color="#3e2312"
                                     ratio="0"/>
                    <s:GradientEntry alpha="1"
                                     color="#614021"
                                     ratio="0.41"/>
                    <s:GradientEntry alpha="1"
                                     color="#85623f"
                                     ratio="1"/>
                </s:LinearGradient>
            </s:fill>
        </s:Path>
    </s:Group>

    <s:Group id="header"
             height="36"
             left="25" left.minimized="55" right="{headerToolGroup.width + 60}" right.minimized="10" top="0">
        <s:Label id="widgetLabel"
                 width="100%"
                 alpha.closed="0"
                 alpha.minimized="0"
                 alpha.open="1"
                 color="0xFFFFFF"
                 fontFamily="Helvetica"
                 fontSize="15"
                 fontWeight="bold"
                 maxDisplayedLines="1"
                 showTruncationTip="true"
                 text="{hostComponent.widgetTitle}"
                 verticalCenter="0"/>
        <s:filters>
            <s:DropShadowFilter alpha="0.4"
                                angle="45.0"
                                blurX="3"
                                blurY="3"
                                color="0x000000"
                                distance="1"
                                hideObject="false"
                                inner="false"
                                knockout="false"
                                quality="2"
                                strength="1"/>
        </s:filters>
    </s:Group>

    <s:Group id="headerToolGroup"
             height="36"
             right="70" top="0"
             alpha.closed="0"
             hasFocusableChildren="true"
             includeInLayout.minimized="false"
             visible.closed="false"
             visible.minimized="false"
             visible.open="true">
        <s:layout>
            <s:HorizontalLayout paddingLeft="10"/>
        </s:layout>
    </s:Group>

    <s:Group id="minclose"
             height="36"
             right="3" top="0"
             includeInLayout.minimized="false"
             visible.closed="false"
             visible.minimized="false">
        <s:layout>
            <s:HorizontalLayout gap="2"
                                paddingLeft="2"
                                verticalAlign="middle"/>
        </s:layout>
        <components:FocusableImage id="minimizeButton"
                                   buttonMode="true"
                                   focusEnabled="true"
                                   includeInLayout="{hostComponent.enableMinimizeButton}"
                                   source="assets/images/w_min.png"
                                   toolTip="{LocalizationUtil.getDefaultString('minimize')}"
                                   useHandCursor="true"
                                   visible="{hostComponent.enableMinimizeButton}"/>
        <!--<components:FocusableImage id="closeButton"
                                   buttonMode="true"
                                   focusEnabled="true"
                                   includeInLayout="{hostComponent.enableCloseButton}"
                                   source="assets/images/w_close.png"
                                   toolTip="{LocalizationUtil.getDefaultString('close')}"
                                   useHandCursor="true"
                                   visible="{hostComponent.enableCloseButton}"/>-->
        <s:Button id="closeButton"
                  focusEnabled="true"
                  includeInLayout="{hostComponent.enableCloseButton}"
                  skinClass="com.github.lheberlie.skins.CloseBtnSkin"
                  toolTip="{LocalizationUtil.getDefaultString('close')}"
                  useHandCursor="true"
                  visible="{hostComponent.enableCloseButton}"/>
    </s:Group>

    <components:FocusableImage id="icon"
                               x.minimized="10" x.open="-20" y="12" y.minimized="-2" width="40" height="40"
                               buttonMode="false"
                               buttonMode.minimized="true"
                               source="{hostComponent.widgetIcon}"
                               tabFocusEnabled="false"
                               useHandCursor="false"
                               useHandCursor.minimized="true"
                               visible="{hostComponent.enableIcon}"
                               visible.closed="false">
        <components:filters>
            <s:DropShadowFilter blurX="10" blurY="10"/>
        </components:filters>
    </components:FocusableImage>

    <s:Group id="contentGroup"
             left="20" right="20" top="35" bottom="20"
             alpha.closed="0"
             alpha.minimized="0"
             clipAndEnableScrolling="true"
             visible.minimized="false"
             visible.normal="true"
             visible.open="true">
        <s:layout>
            <s:BasicLayout/>
        </s:layout>
    </s:Group>

    <mx:Image id="resizeButton"
              right="0" bottom="0"
              preinitialize="resizeButton_preinitializeHandler(event)"
              source="assets/images/w_resize.png"
              visible.closed="false"
              visible.minimized="false"
              visible.open="{hostComponent.resizable}"/>
</s:SparkSkin>
